[build-system]
requires = ["setuptools>=61.0",  "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "tstore"
version = "0.1.0"
description = "Flexible storage for time series."
authors = [{ name = "MartÃ­ Bosch", email = "marti.bosch@protonmail.com" },
           { name = "Gionata Ghiggi", email = "gionata.ghiggi@epfl.ch" }]
readme = "README.md"
keywords = ["python", "time series", "storage", "parquet", "database"]
classifiers = [
	"Development Status :: 1 - Planning",
	"Intended Audience :: Developers",
	"Programming Language :: Python :: 3",
	"Operating System :: Unix",
	"Operating System :: MacOS :: MacOS X",
	"Operating System :: Microsoft :: Windows",
]
license = { text = "MIT" }

requires-python = ">=3.9"
dependencies = [
    "pandas",
    "pyarrow",
    "dask",
    "distributed",
    "polars",
    "geopandas",
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
	"jupyter",
	"pre-commit",
	"pytest",
	"pytest-cov",
	"pytest-mock",
    "pytest-sugar",
	"setuptools",
	"build",
	"twine",
	"loghub",
]


[project.urls]
Repository = "https://github.com/ltelab/tstore"

homepage = "https://github.com/ltelab/tstore"
repository = "https://github.com/ltelab/tstore"
source = "https://github.com/ltelab/tstore"
tracker = "https://github.com/ltelab/tstore/issues"
documentation = "https://tstore.readthedocs.io"
changelog = "https://github.com/ltelab/tstore/blob/main/CHANGELOG.md"

[tool.setuptools_scm]
write_to = "tstore/_version.py"

[tool.setuptools]
license-files = ["LICENSE"]

[tool.setuptools.packages.find]
include = ["tstore*"]


[tool.pytest.ini_options]
addopts = "--cov --cov-report term-missing --cov-report xml --cov-report lcov:lcov.info"

[tool.black]
line-length = 120
preview = true

[tool.ruff]

line-length = 120
indent-width = 4

# Addional file to be formatted by ruff (in addition to *py)
extend-include = ["*.ipynb"]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "data",
    "buck-out",
    "build",
    "docs",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.format]

# Enable reformatting of code snippets in docstrings.
docstring-code-format = true

[tool.ruff.lint]

select = [
	# pydocstyle
    "D",
    # Pyflakes
    "F",
    # pycodestyle
    "E",
    "W",
    # isort
    "I",
    # pyupgrade
    "UP",
    # flake8-quotes
    "Q",
    # flake8-bugbear
    "B",
    # flake8-return
    "RET",
    # flake8-unused-arguments
    "ARG",
    # flake8-raise
    "RSE",
    # flake8-pytest-style
    "PT",
    # flake8-simplify
    "SIM",
    # Perflint
    "PERF",
    # pandas-vet
    "PD",
    # pylint
    "PL",
    # flake8-commas
    "COM",
    # flake8-slots
    "SLOT",
    # flake8-comprehensions
    "C4",
    # Ruff custom rules
    "RUF"

    #---------------------
    #### Future rules ####
    # flake8-use-pathlib
    # "PTH",
    # NumPy-specific rules  (for 2.0)
    # "NPY",
    # refurb
    # "FURB", # require preview
]
ignore = [
    "E722",
    "PT011", # pytest raised error must be checked if match the expected error msg
    "PERF203",
	"PLW2901",
    "B904",
	"RET504",
    "PD901",
    # Docstyle Rules
    "D107", # docstring of __init__ methods
    "D203", # Blanck line between class and docstring
    "D213",
    "D404", # Docstring can't start with "This"
    "D401", # First sentence must be in imperative mood

    # Complexity rules
    "PLR0913",
    "PLR2004",
    "PLR0912",
    "PLR0915",
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]

# Ignore `E402` (import violations) in all Jupyter Notebooks.
"*.ipynb" = ["E402"]

# Rules to ignore in test files
"test_*.py" = [
    "ARG",  # avoid problems with fixtures
    "D100", "D101","D102", "D103", "D104", "D105",  # Missing docstrings
]
"tutorials/*.py" = ["B018"]

"setup.py" = ["D100"]
"*__init__.py" = ["D104"]

[tool.ruff.isort]
known-first-party = ["tstore"]

[tool.codespell]
ignore-words-list = "nd,mis"

[tool.nbqa.addopts]
# ignore documentation errors in notebooks
# also ignore I001, see https://github.com/charliermarsh/ruff/issues/3744
ruff = ["--ignore=D,I001"]
